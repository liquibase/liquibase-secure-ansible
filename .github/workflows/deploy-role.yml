name: Ansible Role Deploy

permissions:
  contents: write
  id-token: write # Required for OIDC authentication

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Value from the version i.e 4.26.0"
        type: string
        required: true
      dry_run:
        description: "Flag to indicate if the workflow is triggered to create a dry-run release"
        required: true
        type: boolean
        default: false
      dry_run_tar_gz_url:
        description: "URL of the dry-run tar.gz release"
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: "Value from the version i.e 4.26.0"
        type: string
        required: true
      dry_run:
        description: "Flag to indicate if the workflow is triggered to create a dry-run release"
        required: true
        type: boolean
        default: false
      dry_run_tar_gz_url:
        description: "URL of the dry-run tar.gz release"
        required: false
        type: string

jobs:
  build_and_deploy_ansible:
    runs-on: ubuntu-latest
    env:
      LIQUIBASE_VERSION: ${{ inputs.version }}

    steps:
      - name: Configure AWS credentials for vault access
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.LIQUIBASE_VAULT_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Get secrets from vault
        id: vault-secrets
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            ,/vault/liquibase
          parse-json-secrets: true

      - name: Get GitHub App token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ env.LIQUIBASE_GITHUB_APP_ID }}
          private-key: ${{ env.LIQUIBASE_GITHUB_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
          permission-contents: write

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: liquibase/liquibase-secure-ansible
          token: ${{ steps.get-token.outputs.token }}

      - name: Configure Git
        run: |
          git config --local user.email "64099989+liquibot@users.noreply.github.com"
          git config --local user.name "liquibot"

      - name: Update main.yml
        if: ${{ inputs.dry_run == false }}
        run: |
          sed -i "s/liquibase_ver: .*/liquibase_ver: ${{ inputs.version }}/" defaults/main.yml
          if [[ "${{ inputs.dry_run }}" == false ]]; then
            wget -O liquibase-secure-${{ inputs.version }}.tar.gz https://package.liquibase.com/downloads/secure/ansible/liquibase-secure-${{ inputs.version }}.tar.gz
          else
            wget --content-disposition --header="Accept: application/octet-stream" --header="Authorization: Token ${{ secrets.GITHUB_TOKEN }}" -O liquibase-${{ inputs.version }}.tar.gz ${{ inputs.dry_run_tar_gz_url }}
          fi
          sha256=$(sha256sum liquibase-secure-${{ inputs.version }}.tar.gz | awk '{ print $1 }')
          echo "SHA256: $sha256"
          echo "  '${{ inputs.version }}': sha256:$sha256" >> defaults/main.yml
          cat defaults/main.yml
          git add defaults/main.yml
          # Check if there are changes before committing
          if git diff-index --quiet HEAD --; then
            echo "No changes to commit."
          else
            git commit -m "Update liquibase.version to ${{ inputs.version }}"
            if [[ "${{ inputs.dry_run }}" == false ]]; then
              git push
            else
                echo "Dry run mode: changes have not been pushed."
            fi
          fi

      - name: Ansible import
        if: ${{ inputs.dry_run == false }}
        run: |
          ansible-galaxy role import --token ${{ env.ANSIBLE_TOKEN }} --branch main --role-name liquibase-secure liquibase liquibase-secure-ansible
